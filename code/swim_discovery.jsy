import {resolve as dns_resolve} from 'dns'
import SWIM from 'swim'

const ts_2015_epoch = 1420070400000 // new Date('2015-01-01T00:00:00.000Z').valueOf()

swim_plugin.default_options = @{}
  swim_port: 2700
  swim_config: @{}
    interval: 100
    joinTimeout: 300
    pingTimeout: 30
    pingReqTimeout: 80
    pingReqGroupSize: 2

export default function swim_plugin(plugin_options) ::
  plugin_options = Object.assign @ {}, swim_plugin.default_options, plugin_options

  return function (hub) ::
    hub.createSWIM = createSWIM

    function assignSWIMMeta(meta) ::
      const {id_route} = hub.local
      return Object.assign @ {id_route}, meta

    function createSWIM({host, meta, url, incarnation}) ::
      if ! host :: throw new Error @ `SWIM package requires a valid "host" parameter`

      if null == incarnation ::
        // use a rough time-based incarnation to help with reusing ip/port
        incarnation = Date.now() - ts_2015_epoch

      meta = Object.assign @ {url, id_route: hub.local.id_route}, meta

      const swim_opts = Object.assign @ {}
        plugin_options.swim_config
        @{} local: @{} host, meta, incarnation

      const swim = new SWIM @ swim_opts
      return new swim_plugin.SwimDiscovery @ hub, swim



class SwimDiscovery ::
  constructor(hub, swim) ::
    const byId = new Map()
    Object.defineProperties @ this, @:
      hub: @: value: hub
      swim: @: value: swim
      byId: @: value: byId

    this._bindSwimUpdates(swim, byId)

  localhost() :: return this.swim.localhost()

  bootstrap(swim_hosts=[], swim_port) ::
    return this._perform_with_swim_hosts @ swim_hosts, swim_port
      (swim, swim_hosts, callback) => swim.bootstrap(swim_hosts, callback)

  join(swim_hosts=[], swim_port) ::
    return this._perform_with_swim_hosts @ swim_hosts, swim_port
      (swim, swim_hosts, callback) => swim.join(swim_hosts, callback)

  _perform_with_swim_hosts(swim_hosts, swim_port, callback) ::
    return new Promise @ (resolve, reject) => ::
      try ::
        const swim = this.swim
        if 'string' === typeof swim_hosts ::
          if ! swim_port ::
            throw new TypeError @ `'swim_port' must be provided when boostrapping using DNS`

          dns_resolve @ swim_hosts, (err, hosts) => ::
            if err :: return reject(err)
            if hosts ::
              swim_hosts = hosts.map @ host => `${host}:${swim_port}`
              callback @ swim, swim_hosts, (err, ans) =>
                err ? reject(err) : resolve(ans)
          return this

        else if Array.isArray @ swim_hosts ::
          if swim_port ::
            swim_hosts = swim_hosts.map @ host =>
              host.includes(':') ? host : `${host}:${swim_port}`
          callback @ swim, swim_hosts, (err, ans) =>
            err ? reject(err) : resolve(ans)
          return this

        throw new TypeError @ `Unexpected 'swim_hosts' parameter format.`
      catch err :: reject(err)


  _bindSwimUpdates(swim, byId) ::
    const updateProps = @{} byId: @: value: byId
    const pqueue = this.promiseQueue @ () => ::
      const updates = Object.defineProperties @ [], updateProps
      const ans = sleep(0, updates)
      ans.updates = updates
      for const sub of this._subscriberList ::
        ans.then(sub)
      return ans

    ::
      const {host, meta} = swim.opts.local
      _on_updateEntry @ meta, 'self', host

    ::
      const swim_state_lut = this.swim_state_lut.slice()
      swim.on @ 'update', evt => ::
        _on_updateEntry @ evt.meta, swim_state_lut[evt.state], evt.host

    function _on_updateEntry(meta, swim_state, swim_host) ::
      const {id_route, ec_pub_id} = meta
      const cur = byId.get(id_route)
      if undefined !== cur && ec_pub_id != cur.ec_pub_id ::
        return // refuse to override existing entries with mismatched ec_pub_id

      const entry = Object.assign @ {}, meta, @{} swim_state, swim_host, swim_ts: new Date()
      byId.set @ id_route, entry
      pqueue().updates.push @ entry


  registerRouterDiscovery(hub) ::
    if null == hub :: hub = this.hub

    const resolveRouterId = query => ::
      const entry = this.byId.get(query.id_route)
      if undefined === entry :: return
      if ! entry.url :: return

      try ::
        return hub.connect @ entry.url
      catch err ::
        this.byId.delete(query.id_route)
        if err && 'ECONNREFUSED' !== err.code ::
          throw err // re-throw if not recognized

    hub.router.routeDiscovery.push @ resolveRouterId
    return this


  _subscriberList = []
  subscribe(callback) ::
    this._subscriberList.push @ callback
    return this

swim_plugin.SwimDiscovery = SwimDiscovery
Object.assign @ SwimDiscovery.prototype, @:
  swim_state_lut: @[] 'alive', 'suspect', 'dead'
  promiseQueue


function sleep(ms, ctx) ::
  return new Promise @ resolve => setTimeout(resolve, ms, ctx)

function promiseQueue(nextPromise) ::
  let tip = null
  return function () ::
    if null === tip ::
      tip = nextPromise()
      tip.then @ clear_tip
    return tip

  function clear_tip() ::
    tip = null

