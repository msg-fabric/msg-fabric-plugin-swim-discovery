require('source-map-support').install()
import MessageHub from '../dist'
import ec_router from '../dist/plugins/ec_router'
import tcp_plugin from '../dist/plugins/tcp'
import swim_plugin from '../dist/plugins/swim_discovery'


const Hub = MessageHub.plugin @
  ec_router()
  tcp_plugin()
  swim_plugin()



async function main_swim_core(swim_port, meta) ::
  const hub = new Hub()
  hub.router.registerTarget @ 0, (msg, router) => ::
    const header = JSON.parse @ msg.sliceHeader().toString() || 'null'
    const body = JSON.parse @ msg.sliceBody().toString() || 'null'
    console.log @ 'CORE got message!', {header, body}, meta

  const svr = hub.tcp.createServer()
  return new Promise @ (resolve, reject) => ::
    svr.once @ 'error', reject
    svr.listen @ 8080, '127.0.0.1', function () ::
      const swimDisco = logSWIMEvents @
        hub.createSWIM @:
          meta, swim_port, channel: svr

      swimDisco.bootstrap() // this core is the bootstrap!

      resolve @: swim_hosts: @# swimDisco.localhost()


async function main_swim_service(swim_port, ctx, meta) ::
  const hub = new Hub()
  hub.router.registerTarget @ 0, (msg, router) => ::
    const header = JSON.parse @ msg.sliceHeader().toString() || 'null'
    const body = JSON.parse @ msg.sliceBody().toString() || 'null'
    console.log @ 'SVC got message!', {header, body}, meta

  const svr = hub.tcp.createServer()
  return new Promise @ (resolve, reject) => ::
    svr.once @ 'error', reject
    svr.listen @ 0, '127.0.0.1', function () ::
      const swimDisco = logSWIMEvents @
        hub.createSWIM @:
          meta, swim_port, channel: svr

      swimDisco.bootstrap @ ctx.swim_hosts

      resolve @: hub, swimDisco

function main_demo({hub, swimDisco}) ::
  dumpTableEverySoOften(swimDisco)
  swimDisco.registerRouterDiscovery()

  const channel = hub.connect_self()
  setInterval @ pingOneAtRandom, 1000

  function pingOneAtRandom() ::
    const lst = Array.from @ swimDisco.byId.values()
    const one = lst @[] 0 | @ Math.random() * lst.length

    channel.sendJSON @:
      id_router: one.id_router
      body: @{} hello: 'yup'


if module === require.main ::
  let _last_port = 2770
  const pickAPort = () => ++ _last_port

  main_swim_core @ 2700, @{}
    topics: @# 'core'

  .then @ ctx => Promise.all @#
    main_swim_service @ pickAPort(), ctx, @{}
      topics: @# 'service_one', 'test'
    main_swim_service @ pickAPort(), ctx, @{}
      topics: @# 'service_two', 'test'
    .then @ main_demo

  .catch @ console.error




function logSWIMEvents(swimDisco) ::
  swimDisco.swim.on @ 'error', err => :: console.log @ 'swim error', err
  swimDisco.swim.on @ 'ready', () => :: console.log @ 'swim ready'
  return swimDisco

function dumpTableEverySoOften(swimDisco) ::
  setTimeout @ dumpTable, 1000
  setInterval @ dumpTable, 15000

  function dumpTable() ::
    console.log @ '\nbyId table:'
    console.dir @
      Array.from @ swimDisco.byId.values()
      @: colors: true
    console.log @ '\n'

